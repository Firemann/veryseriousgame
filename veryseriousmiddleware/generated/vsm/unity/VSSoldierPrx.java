// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `VSSoldierPrx.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package vsm.unity;

public interface VSSoldierPrx extends Ice.ObjectPrx
{
    public void move(vsm.VSDirection direction);

    public void move(vsm.VSDirection direction, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_move(vsm.VSDirection direction);

    public Ice.AsyncResult begin_move(vsm.VSDirection direction, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_move(vsm.VSDirection direction, Ice.Callback __cb);

    public Ice.AsyncResult begin_move(vsm.VSDirection direction, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_move(vsm.VSDirection direction, Callback_VSSoldier_move __cb);

    public Ice.AsyncResult begin_move(vsm.VSDirection direction, java.util.Map<String, String> __ctx, Callback_VSSoldier_move __cb);

    public void end_move(Ice.AsyncResult __result);

    public void run(boolean isRunning);

    public void run(boolean isRunning, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_run(boolean isRunning);

    public Ice.AsyncResult begin_run(boolean isRunning, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_run(boolean isRunning, Ice.Callback __cb);

    public Ice.AsyncResult begin_run(boolean isRunning, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_run(boolean isRunning, Callback_VSSoldier_run __cb);

    public Ice.AsyncResult begin_run(boolean isRunning, java.util.Map<String, String> __ctx, Callback_VSSoldier_run __cb);

    public void end_run(Ice.AsyncResult __result);

    public void crounch();

    public void crounch(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_crounch();

    public Ice.AsyncResult begin_crounch(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_crounch(Ice.Callback __cb);

    public Ice.AsyncResult begin_crounch(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_crounch(Callback_VSSoldier_crounch __cb);

    public Ice.AsyncResult begin_crounch(java.util.Map<String, String> __ctx, Callback_VSSoldier_crounch __cb);

    public void end_crounch(Ice.AsyncResult __result);

    public vsm.VSVector3 getPosition();

    public vsm.VSVector3 getPosition(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getPosition();

    public Ice.AsyncResult begin_getPosition(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getPosition(Ice.Callback __cb);

    public Ice.AsyncResult begin_getPosition(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getPosition(Callback_VSSoldier_getPosition __cb);

    public Ice.AsyncResult begin_getPosition(java.util.Map<String, String> __ctx, Callback_VSSoldier_getPosition __cb);

    public vsm.VSVector3 end_getPosition(Ice.AsyncResult __result);
}
