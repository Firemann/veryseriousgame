// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `networksimulator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include "networksimulator.h"
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

namespace
{

const ::std::string __vsm__networksimulator__VSNode__moveNode_name = "moveNode";

const ::std::string __vsm__networksimulator__VSNode__getActivated_name = "getActivated";

const ::std::string __vsm__networksimulator__VSNode__getName_name = "getName";

const ::std::string __vsm__networksimulator__VSNode__getPosition_name = "getPosition";

const ::std::string __vsm__networksimulator__VSNode__getType_name = "getType";

const ::std::string __vsm__networksimulator__VSNetworkSimulator__createNode_name = "createNode";

const ::std::string __vsm__networksimulator__VSNetworkSimulator__destroyNode_name = "destroyNode";

}

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::vsm::networksimulator::upCast(::IceProxy::vsm::networksimulator::VSNode* p) { return p; }

void
::IceProxy::vsm::networksimulator::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::vsm::networksimulator::VSNode>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::vsm::networksimulator::VSNode;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::vsm::networksimulator::VSNode::moveNode(const ::vsm::VSVector3& coord, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __vsm__networksimulator__VSNode__moveNode_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::vsm::networksimulator::VSNode* __del = dynamic_cast< ::IceDelegate::vsm::networksimulator::VSNode*>(__delBase.get());
            __del->moveNode(coord, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::vsm::networksimulator::VSNode::begin_moveNode(const ::vsm::VSVector3& coord, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __vsm__networksimulator__VSNode__moveNode_name, __del, __cookie);
    try
    {
        __result->__prepare(__vsm__networksimulator__VSNode__moveNode_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(coord);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::vsm::networksimulator::VSNode::end_moveNode(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __vsm__networksimulator__VSNode__moveNode_name);
}

bool
IceProxy::vsm::networksimulator::VSNode::getActivated(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __vsm__networksimulator__VSNode__getActivated_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__vsm__networksimulator__VSNode__getActivated_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::vsm::networksimulator::VSNode* __del = dynamic_cast< ::IceDelegate::vsm::networksimulator::VSNode*>(__delBase.get());
            return __del->getActivated(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::vsm::networksimulator::VSNode::begin_getActivated(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__vsm__networksimulator__VSNode__getActivated_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __vsm__networksimulator__VSNode__getActivated_name, __del, __cookie);
    try
    {
        __result->__prepare(__vsm__networksimulator__VSNode__getActivated_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::vsm::networksimulator::VSNode::end_getActivated(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __vsm__networksimulator__VSNode__getActivated_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::vsm::networksimulator::VSNode::getName(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __vsm__networksimulator__VSNode__getName_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__vsm__networksimulator__VSNode__getName_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::vsm::networksimulator::VSNode* __del = dynamic_cast< ::IceDelegate::vsm::networksimulator::VSNode*>(__delBase.get());
            return __del->getName(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::vsm::networksimulator::VSNode::begin_getName(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__vsm__networksimulator__VSNode__getName_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __vsm__networksimulator__VSNode__getName_name, __del, __cookie);
    try
    {
        __result->__prepare(__vsm__networksimulator__VSNode__getName_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::vsm::networksimulator::VSNode::end_getName(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __vsm__networksimulator__VSNode__getName_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::vsm::VSVector3
IceProxy::vsm::networksimulator::VSNode::getPosition(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __vsm__networksimulator__VSNode__getPosition_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__vsm__networksimulator__VSNode__getPosition_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::vsm::networksimulator::VSNode* __del = dynamic_cast< ::IceDelegate::vsm::networksimulator::VSNode*>(__delBase.get());
            return __del->getPosition(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::vsm::networksimulator::VSNode::begin_getPosition(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__vsm__networksimulator__VSNode__getPosition_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __vsm__networksimulator__VSNode__getPosition_name, __del, __cookie);
    try
    {
        __result->__prepare(__vsm__networksimulator__VSNode__getPosition_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::vsm::VSVector3
IceProxy::vsm::networksimulator::VSNode::end_getPosition(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __vsm__networksimulator__VSNode__getPosition_name);
    ::vsm::VSVector3 __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::vsm::networksimulator::VSNodeType
IceProxy::vsm::networksimulator::VSNode::getType(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __vsm__networksimulator__VSNode__getType_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__vsm__networksimulator__VSNode__getType_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::vsm::networksimulator::VSNode* __del = dynamic_cast< ::IceDelegate::vsm::networksimulator::VSNode*>(__delBase.get());
            return __del->getType(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::vsm::networksimulator::VSNode::begin_getType(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__vsm__networksimulator__VSNode__getType_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __vsm__networksimulator__VSNode__getType_name, __del, __cookie);
    try
    {
        __result->__prepare(__vsm__networksimulator__VSNode__getType_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::vsm::networksimulator::VSNodeType
IceProxy::vsm::networksimulator::VSNode::end_getType(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __vsm__networksimulator__VSNode__getType_name);
    ::vsm::networksimulator::VSNodeType __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::vsm::networksimulator::VSNode::ice_staticId()
{
    return ::vsm::networksimulator::VSNode::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::vsm::networksimulator::VSNode::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::vsm::networksimulator::VSNode);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::vsm::networksimulator::VSNode::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::vsm::networksimulator::VSNode);
}

::IceProxy::Ice::Object*
IceProxy::vsm::networksimulator::VSNode::__newInstance() const
{
    return new VSNode;
}
::IceProxy::Ice::Object* ::IceProxy::vsm::networksimulator::upCast(::IceProxy::vsm::networksimulator::VSNetworkSimulator* p) { return p; }

void
::IceProxy::vsm::networksimulator::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::vsm::networksimulator::VSNetworkSimulator>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::vsm::networksimulator::VSNetworkSimulator;
        v->__copyFrom(proxy);
    }
}

::vsm::networksimulator::VSNodePrx
IceProxy::vsm::networksimulator::VSNetworkSimulator::createNode(const ::std::string& name, const ::vsm::VSVector3& pos, ::vsm::networksimulator::VSNodeType type, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __vsm__networksimulator__VSNetworkSimulator__createNode_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__vsm__networksimulator__VSNetworkSimulator__createNode_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::vsm::networksimulator::VSNetworkSimulator* __del = dynamic_cast< ::IceDelegate::vsm::networksimulator::VSNetworkSimulator*>(__delBase.get());
            return __del->createNode(name, pos, type, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::vsm::networksimulator::VSNetworkSimulator::begin_createNode(const ::std::string& name, const ::vsm::VSVector3& pos, ::vsm::networksimulator::VSNodeType type, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__vsm__networksimulator__VSNetworkSimulator__createNode_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __vsm__networksimulator__VSNetworkSimulator__createNode_name, __del, __cookie);
    try
    {
        __result->__prepare(__vsm__networksimulator__VSNetworkSimulator__createNode_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(name);
        __os->write(pos);
        __os->write(type);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::vsm::networksimulator::VSNodePrx
IceProxy::vsm::networksimulator::VSNetworkSimulator::end_createNode(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __vsm__networksimulator__VSNetworkSimulator__createNode_name);
    ::vsm::networksimulator::VSNodePrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::vsm::networksimulator::VSNetworkSimulator::destroyNode(const ::vsm::networksimulator::VSNodePrx& node, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __vsm__networksimulator__VSNetworkSimulator__destroyNode_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::vsm::networksimulator::VSNetworkSimulator* __del = dynamic_cast< ::IceDelegate::vsm::networksimulator::VSNetworkSimulator*>(__delBase.get());
            __del->destroyNode(node, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::vsm::networksimulator::VSNetworkSimulator::begin_destroyNode(const ::vsm::networksimulator::VSNodePrx& node, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __vsm__networksimulator__VSNetworkSimulator__destroyNode_name, __del, __cookie);
    try
    {
        __result->__prepare(__vsm__networksimulator__VSNetworkSimulator__destroyNode_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(node);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::vsm::networksimulator::VSNetworkSimulator::end_destroyNode(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __vsm__networksimulator__VSNetworkSimulator__destroyNode_name);
}

const ::std::string&
IceProxy::vsm::networksimulator::VSNetworkSimulator::ice_staticId()
{
    return ::vsm::networksimulator::VSNetworkSimulator::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::vsm::networksimulator::VSNetworkSimulator::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::vsm::networksimulator::VSNetworkSimulator);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::vsm::networksimulator::VSNetworkSimulator::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::vsm::networksimulator::VSNetworkSimulator);
}

::IceProxy::Ice::Object*
IceProxy::vsm::networksimulator::VSNetworkSimulator::__newInstance() const
{
    return new VSNetworkSimulator;
}

void
IceDelegateM::vsm::networksimulator::VSNode::moveNode(const ::vsm::VSVector3& coord, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __vsm__networksimulator__VSNode__moveNode_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(coord);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

bool
IceDelegateM::vsm::networksimulator::VSNode::getActivated(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __vsm__networksimulator__VSNode__getActivated_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::vsm::networksimulator::VSNode::getName(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __vsm__networksimulator__VSNode__getName_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::vsm::VSVector3
IceDelegateM::vsm::networksimulator::VSNode::getPosition(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __vsm__networksimulator__VSNode__getPosition_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::vsm::VSVector3 __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::vsm::networksimulator::VSNodeType
IceDelegateM::vsm::networksimulator::VSNode::getType(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __vsm__networksimulator__VSNode__getType_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::vsm::networksimulator::VSNodeType __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::vsm::networksimulator::VSNodePrx
IceDelegateM::vsm::networksimulator::VSNetworkSimulator::createNode(const ::std::string& name, const ::vsm::VSVector3& pos, ::vsm::networksimulator::VSNodeType type, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __vsm__networksimulator__VSNetworkSimulator__createNode_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(name);
        __os->write(pos);
        __os->write(type);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::vsm::networksimulator::VSNodePrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::vsm::networksimulator::VSNetworkSimulator::destroyNode(const ::vsm::networksimulator::VSNodePrx& node, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __vsm__networksimulator__VSNetworkSimulator__destroyNode_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(node);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateD::vsm::networksimulator::VSNode::moveNode(const ::vsm::VSVector3& coord, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::vsm::VSVector3& __p_coord, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_coord(__p_coord)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::vsm::networksimulator::VSNode* servant = dynamic_cast< ::vsm::networksimulator::VSNode*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->moveNode(_m_coord, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::vsm::VSVector3& _m_coord;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __vsm__networksimulator__VSNode__moveNode_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(coord, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

bool
IceDelegateD::vsm::networksimulator::VSNode::getActivated(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::vsm::networksimulator::VSNode* servant = dynamic_cast< ::vsm::networksimulator::VSNode*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getActivated(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __vsm__networksimulator__VSNode__getActivated_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::vsm::networksimulator::VSNode::getName(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::vsm::networksimulator::VSNode* servant = dynamic_cast< ::vsm::networksimulator::VSNode*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getName(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __vsm__networksimulator__VSNode__getName_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::vsm::VSVector3
IceDelegateD::vsm::networksimulator::VSNode::getPosition(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::vsm::VSVector3& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::vsm::networksimulator::VSNode* servant = dynamic_cast< ::vsm::networksimulator::VSNode*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getPosition(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::vsm::VSVector3& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __vsm__networksimulator__VSNode__getPosition_name, ::Ice::Normal, __context);
    ::vsm::VSVector3 __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::vsm::networksimulator::VSNodeType
IceDelegateD::vsm::networksimulator::VSNode::getType(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::vsm::networksimulator::VSNodeType& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::vsm::networksimulator::VSNode* servant = dynamic_cast< ::vsm::networksimulator::VSNode*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getType(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::vsm::networksimulator::VSNodeType& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __vsm__networksimulator__VSNode__getType_name, ::Ice::Normal, __context);
    ::vsm::networksimulator::VSNodeType __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::vsm::networksimulator::VSNodePrx
IceDelegateD::vsm::networksimulator::VSNetworkSimulator::createNode(const ::std::string& name, const ::vsm::VSVector3& pos, ::vsm::networksimulator::VSNodeType type, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::vsm::networksimulator::VSNodePrx& __result, const ::std::string& __p_name, const ::vsm::VSVector3& __p_pos, ::vsm::networksimulator::VSNodeType __p_type, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_name(__p_name),
            _m_pos(__p_pos),
            _m_type(__p_type)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::vsm::networksimulator::VSNetworkSimulator* servant = dynamic_cast< ::vsm::networksimulator::VSNetworkSimulator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->createNode(_m_name, _m_pos, _m_type, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::vsm::networksimulator::VSNodePrx& _result;
        const ::std::string& _m_name;
        const ::vsm::VSVector3& _m_pos;
        ::vsm::networksimulator::VSNodeType _m_type;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __vsm__networksimulator__VSNetworkSimulator__createNode_name, ::Ice::Normal, __context);
    ::vsm::networksimulator::VSNodePrx __result;
    try
    {
        _DirectI __direct(__result, name, pos, type, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::vsm::networksimulator::VSNetworkSimulator::destroyNode(const ::vsm::networksimulator::VSNodePrx& node, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::vsm::networksimulator::VSNodePrx& __p_node, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_node(__p_node)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::vsm::networksimulator::VSNetworkSimulator* servant = dynamic_cast< ::vsm::networksimulator::VSNetworkSimulator*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->destroyNode(_m_node, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::vsm::networksimulator::VSNodePrx& _m_node;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __vsm__networksimulator__VSNetworkSimulator__destroyNode_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(node, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Object* vsm::networksimulator::upCast(::vsm::networksimulator::VSNode* p) { return p; }
::Ice::ObjectPtr
vsm::networksimulator::VSNode::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __vsm__networksimulator__VSNode_ids[2] =
{
    "::Ice::Object",
    "::vsm::networksimulator::VSNode"
};

}

bool
vsm::networksimulator::VSNode::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__vsm__networksimulator__VSNode_ids, __vsm__networksimulator__VSNode_ids + 2, _s);
}

::std::vector< ::std::string>
vsm::networksimulator::VSNode::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__vsm__networksimulator__VSNode_ids[0], &__vsm__networksimulator__VSNode_ids[2]);
}

const ::std::string&
vsm::networksimulator::VSNode::ice_id(const ::Ice::Current&) const
{
    return __vsm__networksimulator__VSNode_ids[1];
}

const ::std::string&
vsm::networksimulator::VSNode::ice_staticId()
{
    return __vsm__networksimulator__VSNode_ids[1];
}

::Ice::DispatchStatus
vsm::networksimulator::VSNode::___moveNode(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::vsm::VSVector3 coord;
    __is->read(coord);
    __inS.endReadParams();
    moveNode(coord, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
vsm::networksimulator::VSNode::___getActivated(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    bool __ret = getActivated(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
vsm::networksimulator::VSNode::___getName(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::std::string __ret = getName(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
vsm::networksimulator::VSNode::___getPosition(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::vsm::VSVector3 __ret = getPosition(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
vsm::networksimulator::VSNode::___getType(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::vsm::networksimulator::VSNodeType __ret = getType(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __vsm__networksimulator__VSNode_all[] =
{
    "getActivated",
    "getName",
    "getPosition",
    "getType",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "moveNode"
};

}

::Ice::DispatchStatus
vsm::networksimulator::VSNode::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__vsm__networksimulator__VSNode_all, __vsm__networksimulator__VSNode_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __vsm__networksimulator__VSNode_all)
    {
        case 0:
        {
            return ___getActivated(in, current);
        }
        case 1:
        {
            return ___getName(in, current);
        }
        case 2:
        {
            return ___getPosition(in, current);
        }
        case 3:
        {
            return ___getType(in, current);
        }
        case 4:
        {
            return ___ice_id(in, current);
        }
        case 5:
        {
            return ___ice_ids(in, current);
        }
        case 6:
        {
            return ___ice_isA(in, current);
        }
        case 7:
        {
            return ___ice_ping(in, current);
        }
        case 8:
        {
            return ___moveNode(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
vsm::networksimulator::VSNode::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
vsm::networksimulator::VSNode::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
vsm::networksimulator::__patch(VSNodePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::vsm::networksimulator::VSNodePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::vsm::networksimulator::VSNode::ice_staticId(), v);
    }
}

::Ice::Object* vsm::networksimulator::upCast(::vsm::networksimulator::VSNetworkSimulator* p) { return p; }
::Ice::ObjectPtr
vsm::networksimulator::VSNetworkSimulator::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

namespace
{
const ::std::string __vsm__networksimulator__VSNetworkSimulator_ids[4] =
{
    "::Ice::Object",
    "::vsm::VSObject",
    "::vsm::network::VSClient",
    "::vsm::networksimulator::VSNetworkSimulator"
};

}

bool
vsm::networksimulator::VSNetworkSimulator::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__vsm__networksimulator__VSNetworkSimulator_ids, __vsm__networksimulator__VSNetworkSimulator_ids + 4, _s);
}

::std::vector< ::std::string>
vsm::networksimulator::VSNetworkSimulator::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__vsm__networksimulator__VSNetworkSimulator_ids[0], &__vsm__networksimulator__VSNetworkSimulator_ids[4]);
}

const ::std::string&
vsm::networksimulator::VSNetworkSimulator::ice_id(const ::Ice::Current&) const
{
    return __vsm__networksimulator__VSNetworkSimulator_ids[3];
}

const ::std::string&
vsm::networksimulator::VSNetworkSimulator::ice_staticId()
{
    return __vsm__networksimulator__VSNetworkSimulator_ids[3];
}

::Ice::DispatchStatus
vsm::networksimulator::VSNetworkSimulator::___createNode(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string name;
    ::vsm::VSVector3 pos;
    ::vsm::networksimulator::VSNodeType type;
    __is->read(name);
    __is->read(pos);
    __is->read(type);
    __inS.endReadParams();
    ::vsm::networksimulator::VSNodePrx __ret = createNode(name, pos, type, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
vsm::networksimulator::VSNetworkSimulator::___destroyNode(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::vsm::networksimulator::VSNodePrx node;
    __is->read(node);
    __inS.endReadParams();
    destroyNode(node, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __vsm__networksimulator__VSNetworkSimulator_all[] =
{
    "createNode",
    "destroyNode",
    "getClientType",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
vsm::networksimulator::VSNetworkSimulator::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__vsm__networksimulator__VSNetworkSimulator_all, __vsm__networksimulator__VSNetworkSimulator_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __vsm__networksimulator__VSNetworkSimulator_all)
    {
        case 0:
        {
            return ___createNode(in, current);
        }
        case 1:
        {
            return ___destroyNode(in, current);
        }
        case 2:
        {
            return ___getClientType(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
vsm::networksimulator::VSNetworkSimulator::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->endWriteSlice();
    ::vsm::VSObject::__writeImpl(__os);
}

void
vsm::networksimulator::VSNetworkSimulator::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::vsm::VSObject::__readImpl(__is);
}

void 
vsm::networksimulator::__patch(VSNetworkSimulatorPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::vsm::networksimulator::VSNetworkSimulatorPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::vsm::networksimulator::VSNetworkSimulator::ice_staticId(), v);
    }
}
