// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `networksimulator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __G__slicecpp_networksimulator_h__
#define __G__slicecpp_networksimulator_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include "vsm.h"
#include "network.h"
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace vsm
{

namespace networksimulator
{

class VSNode;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::vsm::networksimulator::VSNode>&);
::IceProxy::Ice::Object* upCast(::IceProxy::vsm::networksimulator::VSNode*);

class VSNetworkSimulator;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::vsm::networksimulator::VSNetworkSimulator>&);
::IceProxy::Ice::Object* upCast(::IceProxy::vsm::networksimulator::VSNetworkSimulator*);

}

}

}

namespace vsm
{

namespace networksimulator
{

class VSNode;
bool operator==(const VSNode&, const VSNode&);
bool operator<(const VSNode&, const VSNode&);
::Ice::Object* upCast(::vsm::networksimulator::VSNode*);
typedef ::IceInternal::Handle< ::vsm::networksimulator::VSNode> VSNodePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::vsm::networksimulator::VSNode> VSNodePrx;
void __patch(VSNodePtr&, const ::Ice::ObjectPtr&);

class VSNetworkSimulator;
bool operator==(const VSNetworkSimulator&, const VSNetworkSimulator&);
bool operator<(const VSNetworkSimulator&, const VSNetworkSimulator&);
::Ice::Object* upCast(::vsm::networksimulator::VSNetworkSimulator*);
typedef ::IceInternal::Handle< ::vsm::networksimulator::VSNetworkSimulator> VSNetworkSimulatorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::vsm::networksimulator::VSNetworkSimulator> VSNetworkSimulatorPrx;
void __patch(VSNetworkSimulatorPtr&, const ::Ice::ObjectPtr&);

}

}

namespace vsm
{

namespace networksimulator
{

enum VSNodeType
{
    ANTENA,
    CLIENT
};

}

}

namespace Ice
{
template<>
struct StreamableTraits< ::vsm::networksimulator::VSNodeType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

}

namespace vsm
{

namespace networksimulator
{

class Callback_VSNode_moveNode_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_VSNode_moveNode_Base> Callback_VSNode_moveNodePtr;

class Callback_VSNode_getActivated_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_VSNode_getActivated_Base> Callback_VSNode_getActivatedPtr;

class Callback_VSNode_getName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_VSNode_getName_Base> Callback_VSNode_getNamePtr;

class Callback_VSNode_getPosition_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_VSNode_getPosition_Base> Callback_VSNode_getPositionPtr;

class Callback_VSNode_getType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_VSNode_getType_Base> Callback_VSNode_getTypePtr;

class Callback_VSNetworkSimulator_createNode_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_VSNetworkSimulator_createNode_Base> Callback_VSNetworkSimulator_createNodePtr;

class Callback_VSNetworkSimulator_destroyNode_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_VSNetworkSimulator_destroyNode_Base> Callback_VSNetworkSimulator_destroyNodePtr;

}

}

namespace IceProxy
{

namespace vsm
{

namespace networksimulator
{

class VSNode : virtual public ::IceProxy::Ice::Object
{
public:

    void moveNode(const ::vsm::VSVector3& coord)
    {
        moveNode(coord, 0);
    }
    void moveNode(const ::vsm::VSVector3& coord, const ::Ice::Context& __ctx)
    {
        moveNode(coord, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_moveNode(const ::vsm::VSVector3& coord, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_moveNode(coord, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent));
    }
    ::Ice::AsyncResultPtr
    begin_moveNode(const ::vsm::VSVector3& coord, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_moveNode(coord, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_moveNode(const ::vsm::VSVector3& coord, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_moveNode(coord, &ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_moveNode(const ::vsm::VSVector3& coord, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_moveNode(coord, &ctx, ::Ice::newCallback(completed, sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_moveNode(const ::vsm::VSVector3& coord)
    {
        return begin_moveNode(coord, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_moveNode(const ::vsm::VSVector3& coord, const ::Ice::Context& __ctx)
    {
        return begin_moveNode(coord, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_moveNode(const ::vsm::VSVector3& coord, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_moveNode(coord, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_moveNode(const ::vsm::VSVector3& coord, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_moveNode(coord, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_moveNode(const ::vsm::VSVector3& coord, const ::vsm::networksimulator::Callback_VSNode_moveNodePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_moveNode(coord, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_moveNode(const ::vsm::VSVector3& coord, const ::Ice::Context& __ctx, const ::vsm::networksimulator::Callback_VSNode_moveNodePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_moveNode(coord, &__ctx, __del, __cookie);
    }

    void end_moveNode(const ::Ice::AsyncResultPtr&);
    
private:

    void moveNode(const ::vsm::VSVector3&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_moveNode(const ::vsm::VSVector3&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool getActivated()
    {
        return getActivated(0);
    }
    bool getActivated(const ::Ice::Context& __ctx)
    {
        return getActivated(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getActivated(const ::IceInternal::Function<void (bool)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getActivated(0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_getActivated(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getActivated(0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getActivated(const ::Ice::Context& ctx, const ::IceInternal::Function<void (bool)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getActivated(&ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_getActivated(const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getActivated(&ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getActivated(const ::Ice::Context* ctx, const ::IceInternal::Function<void (bool)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::vsm::networksimulator::VSNodePrx __proxy = ::vsm::networksimulator::VSNodePrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_getActivated(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_getActivated(ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getActivated()
    {
        return begin_getActivated(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getActivated(const ::Ice::Context& __ctx)
    {
        return begin_getActivated(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getActivated(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getActivated(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getActivated(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getActivated(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getActivated(const ::vsm::networksimulator::Callback_VSNode_getActivatedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getActivated(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getActivated(const ::Ice::Context& __ctx, const ::vsm::networksimulator::Callback_VSNode_getActivatedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getActivated(&__ctx, __del, __cookie);
    }

    bool end_getActivated(const ::Ice::AsyncResultPtr&);
    
private:

    bool getActivated(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getActivated(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getName()
    {
        return getName(0);
    }
    ::std::string getName(const ::Ice::Context& __ctx)
    {
        return getName(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getName(const ::IceInternal::Function<void (const ::std::string&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::std::string&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(&ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(&ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getName(const ::Ice::Context* ctx, const ::IceInternal::Function<void (const ::std::string&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::vsm::networksimulator::VSNodePrx __proxy = ::vsm::networksimulator::VSNodePrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_getName(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_getName(ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getName()
    {
        return begin_getName(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx)
    {
        return begin_getName(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::vsm::networksimulator::Callback_VSNode_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::vsm::networksimulator::Callback_VSNode_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::std::string end_getName(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getName(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::vsm::VSVector3 getPosition()
    {
        return getPosition(0);
    }
    ::vsm::VSVector3 getPosition(const ::Ice::Context& __ctx)
    {
        return getPosition(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPosition(const ::IceInternal::Function<void (const ::vsm::VSVector3&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPosition(0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPosition(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPosition(0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPosition(const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::vsm::VSVector3&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPosition(&ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPosition(const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPosition(&ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPosition(const ::Ice::Context* ctx, const ::IceInternal::Function<void (const ::vsm::VSVector3&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::vsm::VSVector3&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::vsm::networksimulator::VSNodePrx __proxy = ::vsm::networksimulator::VSNodePrx::uncheckedCast(__result->getProxy());
                ::vsm::VSVector3 __ret;
                try
                {
                    __ret = __proxy->end_getPosition(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::vsm::VSVector3&)> _response;
        };
        return begin_getPosition(ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPosition()
    {
        return begin_getPosition(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPosition(const ::Ice::Context& __ctx)
    {
        return begin_getPosition(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPosition(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPosition(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPosition(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPosition(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPosition(const ::vsm::networksimulator::Callback_VSNode_getPositionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPosition(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPosition(const ::Ice::Context& __ctx, const ::vsm::networksimulator::Callback_VSNode_getPositionPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPosition(&__ctx, __del, __cookie);
    }

    ::vsm::VSVector3 end_getPosition(const ::Ice::AsyncResultPtr&);
    
private:

    ::vsm::VSVector3 getPosition(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPosition(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::vsm::networksimulator::VSNodeType getType()
    {
        return getType(0);
    }
    ::vsm::networksimulator::VSNodeType getType(const ::Ice::Context& __ctx)
    {
        return getType(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getType(const ::IceInternal::Function<void (::vsm::networksimulator::VSNodeType)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getType(0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_getType(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getType(0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getType(const ::Ice::Context& ctx, const ::IceInternal::Function<void (::vsm::networksimulator::VSNodeType)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getType(&ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_getType(const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getType(&ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getType(const ::Ice::Context* ctx, const ::IceInternal::Function<void (::vsm::networksimulator::VSNodeType)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::vsm::networksimulator::VSNodeType)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::vsm::networksimulator::VSNodePrx __proxy = ::vsm::networksimulator::VSNodePrx::uncheckedCast(__result->getProxy());
                ::vsm::networksimulator::VSNodeType __ret;
                try
                {
                    __ret = __proxy->end_getType(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::vsm::networksimulator::VSNodeType)> _response;
        };
        return begin_getType(ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getType()
    {
        return begin_getType(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx)
    {
        return begin_getType(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::vsm::networksimulator::Callback_VSNode_getTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context& __ctx, const ::vsm::networksimulator::Callback_VSNode_getTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getType(&__ctx, __del, __cookie);
    }

    ::vsm::networksimulator::VSNodeType end_getType(const ::Ice::AsyncResultPtr&);
    
private:

    ::vsm::networksimulator::VSNodeType getType(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getType(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<VSNode> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<VSNode*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<VSNode> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<VSNode*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<VSNode> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<VSNode*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<VSNode> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<VSNode*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<VSNode> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<VSNode*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<VSNode> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<VSNode*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<VSNode> ice_secure(bool __secure) const
    {
        return dynamic_cast<VSNode*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<VSNode> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<VSNode*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<VSNode> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<VSNode*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<VSNode> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<VSNode*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<VSNode> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<VSNode*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<VSNode> ice_twoway() const
    {
        return dynamic_cast<VSNode*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<VSNode> ice_oneway() const
    {
        return dynamic_cast<VSNode*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<VSNode> ice_batchOneway() const
    {
        return dynamic_cast<VSNode*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<VSNode> ice_datagram() const
    {
        return dynamic_cast<VSNode*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<VSNode> ice_batchDatagram() const
    {
        return dynamic_cast<VSNode*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<VSNode> ice_compress(bool __compress) const
    {
        return dynamic_cast<VSNode*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<VSNode> ice_timeout(int __timeout) const
    {
        return dynamic_cast<VSNode*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<VSNode> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<VSNode*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<VSNode> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<VSNode*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class VSNetworkSimulator : virtual public ::IceProxy::vsm::VSObject,
                           virtual public ::IceProxy::vsm::network::VSClient
{
public:

    ::vsm::networksimulator::VSNodePrx createNode(const ::std::string& name, const ::vsm::VSVector3& pos, ::vsm::networksimulator::VSNodeType type)
    {
        return createNode(name, pos, type, 0);
    }
    ::vsm::networksimulator::VSNodePrx createNode(const ::std::string& name, const ::vsm::VSVector3& pos, ::vsm::networksimulator::VSNodeType type, const ::Ice::Context& __ctx)
    {
        return createNode(name, pos, type, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createNode(const ::std::string& name, const ::vsm::VSVector3& pos, ::vsm::networksimulator::VSNodeType type, const ::IceInternal::Function<void (const ::vsm::networksimulator::VSNodePrx&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createNode(name, pos, type, 0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_createNode(const ::std::string& name, const ::vsm::VSVector3& pos, ::vsm::networksimulator::VSNodeType type, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createNode(name, pos, type, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createNode(const ::std::string& name, const ::vsm::VSVector3& pos, ::vsm::networksimulator::VSNodeType type, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::vsm::networksimulator::VSNodePrx&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createNode(name, pos, type, &ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_createNode(const ::std::string& name, const ::vsm::VSVector3& pos, ::vsm::networksimulator::VSNodeType type, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createNode(name, pos, type, &ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createNode(const ::std::string& name, const ::vsm::VSVector3& pos, ::vsm::networksimulator::VSNodeType type, const ::Ice::Context* ctx, const ::IceInternal::Function<void (const ::vsm::networksimulator::VSNodePrx&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::vsm::networksimulator::VSNodePrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::vsm::networksimulator::VSNetworkSimulatorPrx __proxy = ::vsm::networksimulator::VSNetworkSimulatorPrx::uncheckedCast(__result->getProxy());
                ::vsm::networksimulator::VSNodePrx __ret;
                try
                {
                    __ret = __proxy->end_createNode(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::vsm::networksimulator::VSNodePrx&)> _response;
        };
        return begin_createNode(name, pos, type, ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createNode(const ::std::string& name, const ::vsm::VSVector3& pos, ::vsm::networksimulator::VSNodeType type)
    {
        return begin_createNode(name, pos, type, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createNode(const ::std::string& name, const ::vsm::VSVector3& pos, ::vsm::networksimulator::VSNodeType type, const ::Ice::Context& __ctx)
    {
        return begin_createNode(name, pos, type, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createNode(const ::std::string& name, const ::vsm::VSVector3& pos, ::vsm::networksimulator::VSNodeType type, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createNode(name, pos, type, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createNode(const ::std::string& name, const ::vsm::VSVector3& pos, ::vsm::networksimulator::VSNodeType type, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createNode(name, pos, type, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createNode(const ::std::string& name, const ::vsm::VSVector3& pos, ::vsm::networksimulator::VSNodeType type, const ::vsm::networksimulator::Callback_VSNetworkSimulator_createNodePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createNode(name, pos, type, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createNode(const ::std::string& name, const ::vsm::VSVector3& pos, ::vsm::networksimulator::VSNodeType type, const ::Ice::Context& __ctx, const ::vsm::networksimulator::Callback_VSNetworkSimulator_createNodePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createNode(name, pos, type, &__ctx, __del, __cookie);
    }

    ::vsm::networksimulator::VSNodePrx end_createNode(const ::Ice::AsyncResultPtr&);
    
private:

    ::vsm::networksimulator::VSNodePrx createNode(const ::std::string&, const ::vsm::VSVector3&, ::vsm::networksimulator::VSNodeType, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createNode(const ::std::string&, const ::vsm::VSVector3&, ::vsm::networksimulator::VSNodeType, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void destroyNode(const ::vsm::networksimulator::VSNodePrx& node)
    {
        destroyNode(node, 0);
    }
    void destroyNode(const ::vsm::networksimulator::VSNodePrx& node, const ::Ice::Context& __ctx)
    {
        destroyNode(node, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_destroyNode(const ::vsm::networksimulator::VSNodePrx& node, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroyNode(node, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent));
    }
    ::Ice::AsyncResultPtr
    begin_destroyNode(const ::vsm::networksimulator::VSNodePrx& node, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroyNode(node, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroyNode(const ::vsm::networksimulator::VSNodePrx& node, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroyNode(node, &ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(response, exception, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroyNode(const ::vsm::networksimulator::VSNodePrx& node, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroyNode(node, &ctx, ::Ice::newCallback(completed, sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_destroyNode(const ::vsm::networksimulator::VSNodePrx& node)
    {
        return begin_destroyNode(node, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroyNode(const ::vsm::networksimulator::VSNodePrx& node, const ::Ice::Context& __ctx)
    {
        return begin_destroyNode(node, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroyNode(const ::vsm::networksimulator::VSNodePrx& node, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroyNode(node, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroyNode(const ::vsm::networksimulator::VSNodePrx& node, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroyNode(node, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroyNode(const ::vsm::networksimulator::VSNodePrx& node, const ::vsm::networksimulator::Callback_VSNetworkSimulator_destroyNodePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroyNode(node, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroyNode(const ::vsm::networksimulator::VSNodePrx& node, const ::Ice::Context& __ctx, const ::vsm::networksimulator::Callback_VSNetworkSimulator_destroyNodePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroyNode(node, &__ctx, __del, __cookie);
    }

    void end_destroyNode(const ::Ice::AsyncResultPtr&);
    
private:

    void destroyNode(const ::vsm::networksimulator::VSNodePrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_destroyNode(const ::vsm::networksimulator::VSNodePrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<VSNetworkSimulator> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<VSNetworkSimulator*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<VSNetworkSimulator> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<VSNetworkSimulator*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<VSNetworkSimulator> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<VSNetworkSimulator*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<VSNetworkSimulator> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<VSNetworkSimulator*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<VSNetworkSimulator> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<VSNetworkSimulator*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<VSNetworkSimulator> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<VSNetworkSimulator*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<VSNetworkSimulator> ice_secure(bool __secure) const
    {
        return dynamic_cast<VSNetworkSimulator*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<VSNetworkSimulator> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<VSNetworkSimulator*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<VSNetworkSimulator> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<VSNetworkSimulator*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<VSNetworkSimulator> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<VSNetworkSimulator*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<VSNetworkSimulator> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<VSNetworkSimulator*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<VSNetworkSimulator> ice_twoway() const
    {
        return dynamic_cast<VSNetworkSimulator*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<VSNetworkSimulator> ice_oneway() const
    {
        return dynamic_cast<VSNetworkSimulator*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<VSNetworkSimulator> ice_batchOneway() const
    {
        return dynamic_cast<VSNetworkSimulator*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<VSNetworkSimulator> ice_datagram() const
    {
        return dynamic_cast<VSNetworkSimulator*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<VSNetworkSimulator> ice_batchDatagram() const
    {
        return dynamic_cast<VSNetworkSimulator*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<VSNetworkSimulator> ice_compress(bool __compress) const
    {
        return dynamic_cast<VSNetworkSimulator*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<VSNetworkSimulator> ice_timeout(int __timeout) const
    {
        return dynamic_cast<VSNetworkSimulator*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<VSNetworkSimulator> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<VSNetworkSimulator*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<VSNetworkSimulator> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<VSNetworkSimulator*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace vsm
{

namespace networksimulator
{

class VSNode : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void moveNode(const ::vsm::VSVector3&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool getActivated(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::vsm::VSVector3 getPosition(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::vsm::networksimulator::VSNodeType getType(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class VSNetworkSimulator : virtual public ::IceDelegate::vsm::VSObject,
                           virtual public ::IceDelegate::vsm::network::VSClient
{
public:

    virtual ::vsm::networksimulator::VSNodePrx createNode(const ::std::string&, const ::vsm::VSVector3&, ::vsm::networksimulator::VSNodeType, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void destroyNode(const ::vsm::networksimulator::VSNodePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace vsm
{

namespace networksimulator
{

class VSNode : virtual public ::IceDelegate::vsm::networksimulator::VSNode,
               virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void moveNode(const ::vsm::VSVector3&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool getActivated(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::vsm::VSVector3 getPosition(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::vsm::networksimulator::VSNodeType getType(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class VSNetworkSimulator : virtual public ::IceDelegate::vsm::networksimulator::VSNetworkSimulator,
                           virtual public ::IceDelegateM::vsm::VSObject,
                           virtual public ::IceDelegateM::vsm::network::VSClient
{
public:

    virtual ::vsm::networksimulator::VSNodePrx createNode(const ::std::string&, const ::vsm::VSVector3&, ::vsm::networksimulator::VSNodeType, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroyNode(const ::vsm::networksimulator::VSNodePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace vsm
{

namespace networksimulator
{

class VSNode : virtual public ::IceDelegate::vsm::networksimulator::VSNode,
               virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void moveNode(const ::vsm::VSVector3&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool getActivated(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::vsm::VSVector3 getPosition(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::vsm::networksimulator::VSNodeType getType(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class VSNetworkSimulator : virtual public ::IceDelegate::vsm::networksimulator::VSNetworkSimulator,
                           virtual public ::IceDelegateD::vsm::VSObject,
                           virtual public ::IceDelegateD::vsm::network::VSClient
{
public:

    virtual ::vsm::networksimulator::VSNodePrx createNode(const ::std::string&, const ::vsm::VSVector3&, ::vsm::networksimulator::VSNodeType, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroyNode(const ::vsm::networksimulator::VSNodePrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace vsm
{

namespace networksimulator
{

class VSNode : virtual public ::Ice::Object
{
public:

    typedef VSNodePrx ProxyType;
    typedef VSNodePtr PointerType;

    VSNode()
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void moveNode(const ::vsm::VSVector3&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___moveNode(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool getActivated(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getActivated(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getName(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::vsm::VSVector3 getPosition(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPosition(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::vsm::networksimulator::VSNodeType getType(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const VSNode& l, const VSNode& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const VSNode& l, const VSNode& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class VSNetworkSimulator : public ::vsm::VSObject,
                           virtual public ::vsm::network::VSClient
{
public:

    typedef VSNetworkSimulatorPrx ProxyType;
    typedef VSNetworkSimulatorPtr PointerType;

    VSNetworkSimulator()
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::vsm::networksimulator::VSNodePrx createNode(const ::std::string&, const ::vsm::VSVector3&, ::vsm::networksimulator::VSNodeType, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createNode(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void destroyNode(const ::vsm::networksimulator::VSNodePrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___destroyNode(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::vsm::VSObject::__writeImpl;
    using ::vsm::VSObject::__readImpl;
    #endif
};

inline bool operator==(const VSNetworkSimulator& l, const VSNetworkSimulator& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const VSNetworkSimulator& l, const VSNetworkSimulator& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace vsm
{

namespace networksimulator
{

template<class T>
class CallbackNC_VSNode_moveNode : public Callback_VSNode_moveNode_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_VSNode_moveNode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_VSNode_moveNodePtr
newCallback_VSNode_moveNode(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VSNode_moveNode<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_VSNode_moveNodePtr
newCallback_VSNode_moveNode(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VSNode_moveNode<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_VSNode_moveNodePtr
newCallback_VSNode_moveNode(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VSNode_moveNode<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_VSNode_moveNodePtr
newCallback_VSNode_moveNode(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VSNode_moveNode<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_VSNode_moveNode : public Callback_VSNode_moveNode_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_VSNode_moveNode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_VSNode_moveNodePtr
newCallback_VSNode_moveNode(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VSNode_moveNode<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_VSNode_moveNodePtr
newCallback_VSNode_moveNode(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VSNode_moveNode<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_VSNode_moveNodePtr
newCallback_VSNode_moveNode(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VSNode_moveNode<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_VSNode_moveNodePtr
newCallback_VSNode_moveNode(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VSNode_moveNode<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_VSNode_getActivated : public Callback_VSNode_getActivated_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_VSNode_getActivated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::vsm::networksimulator::VSNodePrx __proxy = ::vsm::networksimulator::VSNodePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_getActivated(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_VSNode_getActivatedPtr
newCallback_VSNode_getActivated(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VSNode_getActivated<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_VSNode_getActivatedPtr
newCallback_VSNode_getActivated(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VSNode_getActivated<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_VSNode_getActivated : public Callback_VSNode_getActivated_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_VSNode_getActivated(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::vsm::networksimulator::VSNodePrx __proxy = ::vsm::networksimulator::VSNodePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_getActivated(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_VSNode_getActivatedPtr
newCallback_VSNode_getActivated(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VSNode_getActivated<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_VSNode_getActivatedPtr
newCallback_VSNode_getActivated(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VSNode_getActivated<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_VSNode_getName : public Callback_VSNode_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_VSNode_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::vsm::networksimulator::VSNodePrx __proxy = ::vsm::networksimulator::VSNodePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_VSNode_getNamePtr
newCallback_VSNode_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VSNode_getName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_VSNode_getNamePtr
newCallback_VSNode_getName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VSNode_getName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_VSNode_getName : public Callback_VSNode_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_VSNode_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::vsm::networksimulator::VSNodePrx __proxy = ::vsm::networksimulator::VSNodePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_VSNode_getNamePtr
newCallback_VSNode_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VSNode_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_VSNode_getNamePtr
newCallback_VSNode_getName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VSNode_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_VSNode_getPosition : public Callback_VSNode_getPosition_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::vsm::VSVector3&);

    CallbackNC_VSNode_getPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::vsm::networksimulator::VSNodePrx __proxy = ::vsm::networksimulator::VSNodePrx::uncheckedCast(__result->getProxy());
        ::vsm::VSVector3 __ret;
        try
        {
            __ret = __proxy->end_getPosition(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_VSNode_getPositionPtr
newCallback_VSNode_getPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::vsm::VSVector3&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VSNode_getPosition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_VSNode_getPositionPtr
newCallback_VSNode_getPosition(T* instance, void (T::*cb)(const ::vsm::VSVector3&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VSNode_getPosition<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_VSNode_getPosition : public Callback_VSNode_getPosition_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::vsm::VSVector3&, const CT&);

    Callback_VSNode_getPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::vsm::networksimulator::VSNodePrx __proxy = ::vsm::networksimulator::VSNodePrx::uncheckedCast(__result->getProxy());
        ::vsm::VSVector3 __ret;
        try
        {
            __ret = __proxy->end_getPosition(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_VSNode_getPositionPtr
newCallback_VSNode_getPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::vsm::VSVector3&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VSNode_getPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_VSNode_getPositionPtr
newCallback_VSNode_getPosition(T* instance, void (T::*cb)(const ::vsm::VSVector3&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VSNode_getPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_VSNode_getType : public Callback_VSNode_getType_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::vsm::networksimulator::VSNodeType);

    CallbackNC_VSNode_getType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::vsm::networksimulator::VSNodePrx __proxy = ::vsm::networksimulator::VSNodePrx::uncheckedCast(__result->getProxy());
        ::vsm::networksimulator::VSNodeType __ret;
        try
        {
            __ret = __proxy->end_getType(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_VSNode_getTypePtr
newCallback_VSNode_getType(const IceUtil::Handle<T>& instance, void (T::*cb)(::vsm::networksimulator::VSNodeType), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VSNode_getType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_VSNode_getTypePtr
newCallback_VSNode_getType(T* instance, void (T::*cb)(::vsm::networksimulator::VSNodeType), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VSNode_getType<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_VSNode_getType : public Callback_VSNode_getType_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::vsm::networksimulator::VSNodeType, const CT&);

    Callback_VSNode_getType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::vsm::networksimulator::VSNodePrx __proxy = ::vsm::networksimulator::VSNodePrx::uncheckedCast(__result->getProxy());
        ::vsm::networksimulator::VSNodeType __ret;
        try
        {
            __ret = __proxy->end_getType(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_VSNode_getTypePtr
newCallback_VSNode_getType(const IceUtil::Handle<T>& instance, void (T::*cb)(::vsm::networksimulator::VSNodeType, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VSNode_getType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_VSNode_getTypePtr
newCallback_VSNode_getType(T* instance, void (T::*cb)(::vsm::networksimulator::VSNodeType, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VSNode_getType<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_VSNetworkSimulator_createNode : public Callback_VSNetworkSimulator_createNode_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::vsm::networksimulator::VSNodePrx&);

    CallbackNC_VSNetworkSimulator_createNode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::vsm::networksimulator::VSNetworkSimulatorPrx __proxy = ::vsm::networksimulator::VSNetworkSimulatorPrx::uncheckedCast(__result->getProxy());
        ::vsm::networksimulator::VSNodePrx __ret;
        try
        {
            __ret = __proxy->end_createNode(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_VSNetworkSimulator_createNodePtr
newCallback_VSNetworkSimulator_createNode(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::vsm::networksimulator::VSNodePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VSNetworkSimulator_createNode<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_VSNetworkSimulator_createNodePtr
newCallback_VSNetworkSimulator_createNode(T* instance, void (T::*cb)(const ::vsm::networksimulator::VSNodePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VSNetworkSimulator_createNode<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_VSNetworkSimulator_createNode : public Callback_VSNetworkSimulator_createNode_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::vsm::networksimulator::VSNodePrx&, const CT&);

    Callback_VSNetworkSimulator_createNode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::vsm::networksimulator::VSNetworkSimulatorPrx __proxy = ::vsm::networksimulator::VSNetworkSimulatorPrx::uncheckedCast(__result->getProxy());
        ::vsm::networksimulator::VSNodePrx __ret;
        try
        {
            __ret = __proxy->end_createNode(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_VSNetworkSimulator_createNodePtr
newCallback_VSNetworkSimulator_createNode(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::vsm::networksimulator::VSNodePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VSNetworkSimulator_createNode<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_VSNetworkSimulator_createNodePtr
newCallback_VSNetworkSimulator_createNode(T* instance, void (T::*cb)(const ::vsm::networksimulator::VSNodePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VSNetworkSimulator_createNode<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_VSNetworkSimulator_destroyNode : public Callback_VSNetworkSimulator_destroyNode_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_VSNetworkSimulator_destroyNode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_VSNetworkSimulator_destroyNodePtr
newCallback_VSNetworkSimulator_destroyNode(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VSNetworkSimulator_destroyNode<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_VSNetworkSimulator_destroyNodePtr
newCallback_VSNetworkSimulator_destroyNode(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VSNetworkSimulator_destroyNode<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_VSNetworkSimulator_destroyNodePtr
newCallback_VSNetworkSimulator_destroyNode(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VSNetworkSimulator_destroyNode<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_VSNetworkSimulator_destroyNodePtr
newCallback_VSNetworkSimulator_destroyNode(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VSNetworkSimulator_destroyNode<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_VSNetworkSimulator_destroyNode : public Callback_VSNetworkSimulator_destroyNode_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_VSNetworkSimulator_destroyNode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_VSNetworkSimulator_destroyNodePtr
newCallback_VSNetworkSimulator_destroyNode(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VSNetworkSimulator_destroyNode<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_VSNetworkSimulator_destroyNodePtr
newCallback_VSNetworkSimulator_destroyNode(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VSNetworkSimulator_destroyNode<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_VSNetworkSimulator_destroyNodePtr
newCallback_VSNetworkSimulator_destroyNode(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VSNetworkSimulator_destroyNode<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_VSNetworkSimulator_destroyNodePtr
newCallback_VSNetworkSimulator_destroyNode(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VSNetworkSimulator_destroyNode<T, CT>(instance, 0, excb, sentcb);
}

}

}

#endif
