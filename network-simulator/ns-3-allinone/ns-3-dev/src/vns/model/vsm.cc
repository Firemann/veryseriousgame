// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `vsm.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include "vsm.h"
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::vsm::upCast(::IceProxy::vsm::VSObject* p) { return p; }

void
::IceProxy::vsm::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::vsm::VSObject>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::vsm::VSObject;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::vsm::VSObject::ice_staticId()
{
    return ::vsm::VSObject::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::vsm::VSObject::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::vsm::VSObject);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::vsm::VSObject::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::vsm::VSObject);
}

::IceProxy::Ice::Object*
IceProxy::vsm::VSObject::__newInstance() const
{
    return new VSObject;
}

::Ice::Object* vsm::upCast(::vsm::VSObject* p) { return p; }
::Ice::ObjectPtr
vsm::VSObject::ice_clone() const
{
    ::Ice::Object* __p = new VSObject(*this);
    return __p;
}

namespace
{
const ::std::string __vsm__VSObject_ids[2] =
{
    "::Ice::Object",
    "::vsm::VSObject"
};

}

bool
vsm::VSObject::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__vsm__VSObject_ids, __vsm__VSObject_ids + 2, _s);
}

::std::vector< ::std::string>
vsm::VSObject::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__vsm__VSObject_ids[0], &__vsm__VSObject_ids[2]);
}

const ::std::string&
vsm::VSObject::ice_id(const ::Ice::Current&) const
{
    return __vsm__VSObject_ids[1];
}

const ::std::string&
vsm::VSObject::ice_staticId()
{
    return __vsm__VSObject_ids[1];
}

void
vsm::VSObject::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
vsm::VSObject::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

class __F__vsm__VSObject : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::vsm::VSObject::ice_staticId());
        return new ::vsm::VSObject;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__vsm__VSObject_Ptr = new __F__vsm__VSObject;

class __F__vsm__VSObject__Init
{
public:

    __F__vsm__VSObject__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::vsm::VSObject::ice_staticId(), __F__vsm__VSObject_Ptr);
    }

    ~__F__vsm__VSObject__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::vsm::VSObject::ice_staticId());
    }
};

const __F__vsm__VSObject__Init __F__vsm__VSObject__i;

}

const ::Ice::ObjectFactoryPtr&
vsm::VSObject::ice_factory()
{
    return __F__vsm__VSObject_Ptr;
}

void 
vsm::__patch(VSObjectPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::vsm::VSObjectPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::vsm::VSObject::ice_staticId(), v);
    }
}
