// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `vsm.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __G__slicecpp_vsm_h__
#define __G__slicecpp_vsm_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace vsm
{

class VSObject;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::vsm::VSObject>&);
::IceProxy::Ice::Object* upCast(::IceProxy::vsm::VSObject*);

}

}

namespace vsm
{

class VSObject;
bool operator==(const VSObject&, const VSObject&);
bool operator<(const VSObject&, const VSObject&);
::Ice::Object* upCast(::vsm::VSObject*);
typedef ::IceInternal::Handle< ::vsm::VSObject> VSObjectPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::vsm::VSObject> VSObjectPrx;
void __patch(VSObjectPtr&, const ::Ice::ObjectPtr&);

}

namespace vsm
{

struct VSVector2
{
    ::Ice::Float x;
    ::Ice::Float y;
};

struct VSVector3
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
};

enum VSDirection
{
    LEFT,
    RIGHT,
    UP,
    DOWN
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::vsm::VSVector2>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::vsm::VSVector2, S>
{
    static void write(S* __os, const ::vsm::VSVector2& v)
    {
        __os->write(v.x);
        __os->write(v.y);
    }
};

template<class S>
struct StreamReader< ::vsm::VSVector2, S>
{
    static void read(S* __is, ::vsm::VSVector2& v)
    {
        __is->read(v.x);
        __is->read(v.y);
    }
};

template<>
struct StreamableTraits< ::vsm::VSVector3>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::vsm::VSVector3, S>
{
    static void write(S* __os, const ::vsm::VSVector3& v)
    {
        __os->write(v.x);
        __os->write(v.y);
        __os->write(v.z);
    }
};

template<class S>
struct StreamReader< ::vsm::VSVector3, S>
{
    static void read(S* __is, ::vsm::VSVector3& v)
    {
        __is->read(v.x);
        __is->read(v.y);
        __is->read(v.z);
    }
};

template<>
struct StreamableTraits< ::vsm::VSDirection>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

}

namespace vsm
{

}

namespace IceProxy
{

namespace vsm
{

class VSObject : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<VSObject> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<VSObject*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<VSObject> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<VSObject*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<VSObject> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<VSObject*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<VSObject> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<VSObject*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<VSObject> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<VSObject*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<VSObject> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<VSObject*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<VSObject> ice_secure(bool __secure) const
    {
        return dynamic_cast<VSObject*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<VSObject> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<VSObject*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<VSObject> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<VSObject*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<VSObject> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<VSObject*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<VSObject> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<VSObject*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<VSObject> ice_twoway() const
    {
        return dynamic_cast<VSObject*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<VSObject> ice_oneway() const
    {
        return dynamic_cast<VSObject*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<VSObject> ice_batchOneway() const
    {
        return dynamic_cast<VSObject*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<VSObject> ice_datagram() const
    {
        return dynamic_cast<VSObject*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<VSObject> ice_batchDatagram() const
    {
        return dynamic_cast<VSObject*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<VSObject> ice_compress(bool __compress) const
    {
        return dynamic_cast<VSObject*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<VSObject> ice_timeout(int __timeout) const
    {
        return dynamic_cast<VSObject*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<VSObject> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<VSObject*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<VSObject> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<VSObject*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace vsm
{

class VSObject : virtual public ::IceDelegate::Ice::Object
{
public:
};

}

}

namespace IceDelegateM
{

namespace vsm
{

class VSObject : virtual public ::IceDelegate::vsm::VSObject,
                 virtual public ::IceDelegateM::Ice::Object
{
public:
};

}

}

namespace IceDelegateD
{

namespace vsm
{

class VSObject : virtual public ::IceDelegate::vsm::VSObject,
                 virtual public ::IceDelegateD::Ice::Object
{
public:
};

}

}

namespace vsm
{

class VSObject : virtual public ::Ice::Object
{
public:

    typedef VSObjectPrx ProxyType;
    typedef VSObjectPtr PointerType;

    VSObject()
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

    virtual ~VSObject() {}

    friend class VSObject__staticInit;
};

class VSObject__staticInit
{
public:

    ::vsm::VSObject _init;
};

static VSObject__staticInit _VSObject_init;

inline bool operator==(const VSObject& l, const VSObject& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const VSObject& l, const VSObject& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace vsm
{

}

#endif
